{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Intro Sam Howes Email: sam@samhowes.com; LinkedIn Bachelor's in Computer Engineering, ECE 2014 8 Years in the practice of Software Engineering as a generalist Develop Write Code Review Code Front-end Backend/Serverside Data Modeling Automation Test Automation Build Automation Deployment Automation Design Gather requirements from users Make pretty web interfaces Project Manage Prioritize work Project deadlines Try to hit a release date What I do Problem Solve Compose other people's solutions into my own solution Apply common solutions to new problems Use heavy sarcasm What I don't do Write algorithms Do science Come up with novel solutions to problems","title":"Intro"},{"location":"#intro","text":"","title":"Intro"},{"location":"#sam-howes","text":"Email: sam@samhowes.com; LinkedIn Bachelor's in Computer Engineering, ECE 2014 8 Years in the practice of Software Engineering as a generalist Develop Write Code Review Code Front-end Backend/Serverside Data Modeling Automation Test Automation Build Automation Deployment Automation Design Gather requirements from users Make pretty web interfaces Project Manage Prioritize work Project deadlines Try to hit a release date","title":"Sam Howes"},{"location":"#what-i-do","text":"Problem Solve Compose other people's solutions into my own solution Apply common solutions to new problems Use heavy sarcasm","title":"What I do"},{"location":"#what-i-dont-do","text":"Write algorithms Do science Come up with novel solutions to problems","title":"What I don't do"},{"location":"about_me/","text":"Do you care what I have to say? Attended BU College of Engineering 2010 - 2014 Took EC327 with Prof. Coskun Started Undergraduate Research with Prof. Coskun in 2012 Generate Heatmap Video of Individual Layers of a 3D Stacked CPU Hotspot, GNUPlot, C++ Interpolated temperature measurements feeding into Hotspot Python, C Failed to Benchmark Virtual Machine performance VMMark, VMWare ESXi I Cried: IT & Networking is hard Courses that matter to me today Intro to Statics (ENG EK 301) Computer Organization & Design (ENG EC 413) Intro to MSP430 (Microcontrollers) (ENG EC 450) Microeconomics (ECON 101) Embedded Systems (ENG EC 535) Senior Design Awarded the Michael F Ruane award for Best Engineer in ECE class of 2014 Worked at Mingle Analytics 2014-2017 (Remotely from Florida & Washington DC) 20-50 People working on insurance related Doctor billing Led team of 2-7 on ~3 Applications Web Development: C#, ASP.NET, AngularJS, SQL Continuous Integration & Delivery: TeamCity Learned Agile Project Management via Agile Coach Worked at Google 2017-2019 (In-person from Boulder, CO) 80K Software Engineers getting paid too much money to eat free food, drink free lattes, and get free massages Worked on a team of 4-5 writing UI tests for Google Drive Android Java, Android Espresso, Python, gRPC Worked by myself for a team of ~10 writing tests for Google Workspace Migrate Python Experienced Big Tech Worked at Community Health Options 2019-2021 130 Person Health Insurance Company founded under Obamacare as a Healthcare Exchange Led team of 10 on ~100 data automation jobs & 5 Public Web Applications C# .net core, Angular, SQL CI/CD: Kubernetes, MSBuild, Windows & Linux Started at Erbi Biosystems in 2022 30 Person Biotech startup founded by MIT PHD Students Grow cells at 1/1000th of the scale for 500x cheaper Applications: Personalized Medicine, Testing Scaled-down production of cells Market: University Research, Bio-pharma companies My hope: Work on a product that enables another company to cure cancer Most of my opinions come from, or are fully manifested by, my work at this company in for the last 4 months. First experienced Software Engineer at the company Inherited: 2 applications, an arduino, and 2 FPGAs My task: make everyone profit Extracurriculars: Alumni Judge for ECE Senior Design Projects every May on ECE Day rules_msbuild : (personal github project) an integration of msbuild ( dotnet build toolchain) with Bazel","title":"Bio"},{"location":"about_me/#do-you-care-what-i-have-to-say","text":"","title":"Do you care what I have to say?"},{"location":"about_me/#attended-bu-college-of-engineering-2010-2014","text":"Took EC327 with Prof. Coskun Started Undergraduate Research with Prof. Coskun in 2012 Generate Heatmap Video of Individual Layers of a 3D Stacked CPU Hotspot, GNUPlot, C++ Interpolated temperature measurements feeding into Hotspot Python, C Failed to Benchmark Virtual Machine performance VMMark, VMWare ESXi I Cried: IT & Networking is hard Courses that matter to me today Intro to Statics (ENG EK 301) Computer Organization & Design (ENG EC 413) Intro to MSP430 (Microcontrollers) (ENG EC 450) Microeconomics (ECON 101) Embedded Systems (ENG EC 535) Senior Design Awarded the Michael F Ruane award for Best Engineer in ECE class of 2014","title":"Attended BU College of Engineering 2010 - 2014"},{"location":"about_me/#worked-at-mingle-analytics-2014-2017-remotely-from-florida-washington-dc","text":"20-50 People working on insurance related Doctor billing Led team of 2-7 on ~3 Applications Web Development: C#, ASP.NET, AngularJS, SQL Continuous Integration & Delivery: TeamCity Learned Agile Project Management via Agile Coach","title":"Worked at Mingle Analytics 2014-2017 (Remotely from Florida &amp; Washington DC)"},{"location":"about_me/#worked-at-google-2017-2019-in-person-from-boulder-co","text":"80K Software Engineers getting paid too much money to eat free food, drink free lattes, and get free massages Worked on a team of 4-5 writing UI tests for Google Drive Android Java, Android Espresso, Python, gRPC Worked by myself for a team of ~10 writing tests for Google Workspace Migrate Python Experienced Big Tech","title":"Worked at Google 2017-2019 (In-person from Boulder, CO)"},{"location":"about_me/#worked-at-community-health-options-2019-2021","text":"130 Person Health Insurance Company founded under Obamacare as a Healthcare Exchange Led team of 10 on ~100 data automation jobs & 5 Public Web Applications C# .net core, Angular, SQL CI/CD: Kubernetes, MSBuild, Windows & Linux","title":"Worked at Community Health Options 2019-2021"},{"location":"about_me/#started-at-erbi-biosystems-in-2022","text":"30 Person Biotech startup founded by MIT PHD Students Grow cells at 1/1000th of the scale for 500x cheaper Applications: Personalized Medicine, Testing Scaled-down production of cells Market: University Research, Bio-pharma companies My hope: Work on a product that enables another company to cure cancer Most of my opinions come from, or are fully manifested by, my work at this company in for the last 4 months. First experienced Software Engineer at the company Inherited: 2 applications, an arduino, and 2 FPGAs My task: make everyone profit","title":"Started at Erbi Biosystems in 2022"},{"location":"about_me/#extracurriculars","text":"Alumni Judge for ECE Senior Design Projects every May on ECE Day rules_msbuild : (personal github project) an integration of msbuild ( dotnet build toolchain) with Bazel","title":"Extracurriculars:"},{"location":"reference/","text":"Opinion","title":"Opinion"},{"location":"reference/#opinion","text":"","title":"Opinion"},{"location":"reference/code_reviews/","text":"Code Reviews Code Reviews , usually done via Pull Requests , are perhaps the most important part of the DevOps lifecyle. They give you the opportunity to get your mistakes fixed by others They allow others to understand your work They allow you to share the burden of fixing bugs in your code","title":"Code Reviews"},{"location":"reference/code_reviews/#code-reviews","text":"Code Reviews , usually done via Pull Requests , are perhaps the most important part of the DevOps lifecyle. They give you the opportunity to get your mistakes fixed by others They allow others to understand your work They allow you to share the burden of fixing bugs in your code","title":"Code Reviews"},{"location":"reference/good_software_engineer/","text":"Positive Traits of Software Engineers A good Software Engineer is lazy, antisocial, is only capable of talking to a fifth grader, and can't get anything done by themselves. Laziness Never perform the same task more than once: Automate Everything. Humans are guaranteed to make mistakes, therefore any process done by a human has a high potential for error. Antisocial Avoid as many conversations as possible: Document everything. Any information conveyed in a conversation is limited to the people present for that conversation. An engineer's time is worth a lot of money. Money should not be spent without proper planning and understanding of where that money is going. Nothing is decided until it is written down. Simple Communication Proper documentation is written such that a fifth grader can understand it, without jargon . Software Engineers must interact with all kinds of people in many disciplines: Sales, Support, Management, Customers, CEO's, their Mom, their boyfriend/girlfriend, and children. Almost all people a Software Engineer interacts with are educated on another topic, and want things to \"simply work\" without needing a degree in Computer Science to interact with a Software Engineer's work. Encapsulation is critical to communication: users are trying to accomplish their own task, they are not trying to understand your task. What does this car do? It takes you where you want to go Can't do anything by themselves Work must be reviewed for mistakes. \"I must have made a mistake somewhere, please help me find it\" Summary A good Software Engineer automates everything, will only work on formally documented work requests, speaks simply, so all can understand, and makes sure their work is reviewed before it is relied upon.","title":"Good Software Engineers"},{"location":"reference/good_software_engineer/#positive-traits-of-software-engineers","text":"A good Software Engineer is lazy, antisocial, is only capable of talking to a fifth grader, and can't get anything done by themselves.","title":"Positive Traits of Software Engineers"},{"location":"reference/good_software_engineer/#laziness","text":"Never perform the same task more than once: Automate Everything. Humans are guaranteed to make mistakes, therefore any process done by a human has a high potential for error.","title":"Laziness"},{"location":"reference/good_software_engineer/#antisocial","text":"Avoid as many conversations as possible: Document everything. Any information conveyed in a conversation is limited to the people present for that conversation. An engineer's time is worth a lot of money. Money should not be spent without proper planning and understanding of where that money is going. Nothing is decided until it is written down.","title":"Antisocial"},{"location":"reference/good_software_engineer/#simple-communication","text":"Proper documentation is written such that a fifth grader can understand it, without jargon . Software Engineers must interact with all kinds of people in many disciplines: Sales, Support, Management, Customers, CEO's, their Mom, their boyfriend/girlfriend, and children. Almost all people a Software Engineer interacts with are educated on another topic, and want things to \"simply work\" without needing a degree in Computer Science to interact with a Software Engineer's work. Encapsulation is critical to communication: users are trying to accomplish their own task, they are not trying to understand your task. What does this car do? It takes you where you want to go","title":"Simple Communication"},{"location":"reference/good_software_engineer/#cant-do-anything-by-themselves","text":"Work must be reviewed for mistakes. \"I must have made a mistake somewhere, please help me find it\"","title":"Can't do anything by themselves"},{"location":"reference/good_software_engineer/#summary","text":"A good Software Engineer automates everything, will only work on formally documented work requests, speaks simply, so all can understand, and makes sure their work is reviewed before it is relied upon.","title":"Summary"},{"location":"reference/tdd/","text":"Test Driven Development","title":"Test Driven Development"},{"location":"reference/tdd/#test-driven-development","text":"","title":"Test Driven Development"},{"location":"reference/agile/components/","text":"Agile Components The Backlog Record work items, execute them in priority order Grooming Vet work items for readiness Daily Standup Communicate progress and blockers Retrospective What went well? What went poorly? What's something new that we can try? What do we need to do next time?","title":"Components"},{"location":"reference/agile/components/#agile-components","text":"","title":"Agile Components"},{"location":"reference/agile/components/#the-backlog","text":"Record work items, execute them in priority order","title":"The Backlog"},{"location":"reference/agile/components/#grooming","text":"Vet work items for readiness","title":"Grooming"},{"location":"reference/agile/components/#daily-standup","text":"Communicate progress and blockers","title":"Daily Standup"},{"location":"reference/agile/components/#retrospective","text":"What went well? What went poorly? What's something new that we can try? What do we need to do next time?","title":"Retrospective"},{"location":"reference/agile/implementation/","text":"Agile Project Management \"The best tool is the tool that you use best\" Opinion: Make Azure DevOps the tool that you use best Alternatives to Azure DevOps Jira Opinion : Far too customizable and complicated. Work Item tracking should simply be \"New, Active, Closed\" \"Keep It Simple, Stupid\" : Work item tracking should not involve a complex state machine GitHub Issues Opinion : Far too simple for anything other than small projects. Work Items need to be just more than \"Open\" and \"Closed\" with a chain of comments Asana Opinion : Work item tracking needs to be integrated with Source Control Asana has long task Ids, which are hard to remember and reference from code Azure DevOps Key Features Three Level Hierarchy: Epic > Features > User Stories Acceptance Criteria Story Points Kanban Board Example Kanban Board Example Backlog","title":"Tools"},{"location":"reference/agile/implementation/#agile-project-management","text":"\"The best tool is the tool that you use best\" Opinion: Make Azure DevOps the tool that you use best","title":"Agile Project Management"},{"location":"reference/agile/implementation/#alternatives-to-azure-devops","text":"","title":"Alternatives to Azure DevOps"},{"location":"reference/agile/implementation/#jira","text":"Opinion : Far too customizable and complicated. Work Item tracking should simply be \"New, Active, Closed\" \"Keep It Simple, Stupid\" : Work item tracking should not involve a complex state machine","title":"Jira"},{"location":"reference/agile/implementation/#github-issues","text":"Opinion : Far too simple for anything other than small projects. Work Items need to be just more than \"Open\" and \"Closed\" with a chain of comments","title":"GitHub Issues"},{"location":"reference/agile/implementation/#asana","text":"Opinion : Work item tracking needs to be integrated with Source Control Asana has long task Ids, which are hard to remember and reference from code","title":"Asana"},{"location":"reference/agile/implementation/#azure-devops","text":"","title":"Azure DevOps"},{"location":"reference/agile/implementation/#key-features","text":"Three Level Hierarchy: Epic > Features > User Stories Acceptance Criteria Story Points Kanban Board Example Kanban Board Example Backlog","title":"Key Features"},{"location":"reference/agile/overview/","text":"Agile Project Management Opinion: Every engineer needs a taste of project management Problem Humans are bad at estimating how long something will take The work is harder than originally anticipated Scope Creep Managers & Salespeople get bored waiting for developers to finish a feature set, and say \"just one more thing\" Developers want to \"make something cool\" Developers try to \"predict the future\" and implement code they don't need today, and never end up using in the future (salespeople sell new customers on different features) Eager to please: \"That'll be easy, I can do ten of those\" Task switching The Solution Don't estimate time (hours, days, weeks) Don't start work on a task before your customer/manager/advisor understands how long you think the work will take Don't estimate a task before knowing what it means to finish that task Acceptance Criteria: \"A set of tests that the user will perform\" Once you start a task, finish that task before doing anything else, never leave a task unfinished Too much work? \"Cut features\": Move some acceptance criteria to a new task Your customer wants more features? Create a new task with the acceptance criteria Estimate in \"Points\" Fibonacci numbers: The harder something is to do, the more uncertain you are about how long it will take 1, 2, 3, 5, 8, 13, 21, 34 Strive only for Good enough : \"Accurate Estimate\" is an oxymoron Don't let perfect be the enemy of good Tradeoff: The more time you spend estimating and planning work, the less time you spend doing work \"Everything's made up and the points don't matter\" Calculate completion time using velocity Determine \"points closed per day\" Use code and automation to forecast dates If the forecast doesn't match the deadline, let your customer cut features. Never cut quality","title":"Philosophy"},{"location":"reference/agile/overview/#agile-project-management","text":"Opinion: Every engineer needs a taste of project management","title":"Agile Project Management"},{"location":"reference/agile/overview/#problem","text":"Humans are bad at estimating how long something will take The work is harder than originally anticipated Scope Creep Managers & Salespeople get bored waiting for developers to finish a feature set, and say \"just one more thing\" Developers want to \"make something cool\" Developers try to \"predict the future\" and implement code they don't need today, and never end up using in the future (salespeople sell new customers on different features) Eager to please: \"That'll be easy, I can do ten of those\" Task switching","title":"Problem"},{"location":"reference/agile/overview/#the-solution","text":"Don't estimate time (hours, days, weeks) Don't start work on a task before your customer/manager/advisor understands how long you think the work will take Don't estimate a task before knowing what it means to finish that task Acceptance Criteria: \"A set of tests that the user will perform\" Once you start a task, finish that task before doing anything else, never leave a task unfinished Too much work? \"Cut features\": Move some acceptance criteria to a new task Your customer wants more features? Create a new task with the acceptance criteria Estimate in \"Points\" Fibonacci numbers: The harder something is to do, the more uncertain you are about how long it will take 1, 2, 3, 5, 8, 13, 21, 34 Strive only for Good enough : \"Accurate Estimate\" is an oxymoron Don't let perfect be the enemy of good Tradeoff: The more time you spend estimating and planning work, the less time you spend doing work \"Everything's made up and the points don't matter\" Calculate completion time using velocity Determine \"points closed per day\" Use code and automation to forecast dates If the forecast doesn't match the deadline, let your customer cut features. Never cut quality","title":"The Solution"},{"location":"story/","text":"A Typical Day At Work You're name is Josh It's Monday. You are a Software Engineer named Josh. Your coworker, Sam, has been out on vacation since last week, and won't be in until next Monday. Sam is a good Software Engineer , so you aspire to be more like him. The names in this story are completely fictional. Any resemblance to real people or characters is by coincidence only. You've heard Sam talk about DevOps a lot, but you're not entirely sure what all the hype is about: You like working on new features instead of overhead of development. You are making good progress on a project that you are excited about, and it should be done in \"a couple weeks\", so your morale is high. Bob is your Manager Bob is your manager. You have a good relationship with Bob, you're still learning his full history of work and motivations though. It's getting to the end of the quarter, and Bob has told you that he has some spot-bonus money that he is going to give away soon. You're hoping to get the $10K for doing good work. Bob comes to talk to you","title":"Monday"},{"location":"story/#a-typical-day-at-work","text":"","title":"A Typical Day At Work"},{"location":"story/#youre-name-is-josh","text":"It's Monday. You are a Software Engineer named Josh. Your coworker, Sam, has been out on vacation since last week, and won't be in until next Monday. Sam is a good Software Engineer , so you aspire to be more like him. The names in this story are completely fictional. Any resemblance to real people or characters is by coincidence only. You've heard Sam talk about DevOps a lot, but you're not entirely sure what all the hype is about: You like working on new features instead of overhead of development. You are making good progress on a project that you are excited about, and it should be done in \"a couple weeks\", so your morale is high.","title":"You're name is Josh"},{"location":"story/#bob-is-your-manager","text":"Bob is your manager. You have a good relationship with Bob, you're still learning his full history of work and motivations though. It's getting to the end of the quarter, and Bob has told you that he has some spot-bonus money that he is going to give away soon. You're hoping to get the $10K for doing good work. Bob comes to talk to you","title":"Bob is your Manager"},{"location":"story/bad_feature/","text":"\"They're crazy, they don't actually want this feature\" Bob gives you a spot-bonus of $6K for being a good engineer Congratulations, Bob was just testing you. Bob was making sure that you were being disciplined and that you were adhering to the team's process. Bob knows that the process of reviewing work is critical to avoiding bugs in production.","title":"\"They're crazy, they don't actually want this feature\""},{"location":"story/bad_feature/#theyre-crazy-they-dont-actually-want-this-feature","text":"Bob gives you a spot-bonus of $6K for being a good engineer Congratulations, Bob was just testing you. Bob was making sure that you were being disciplined and that you were adhering to the team's process. Bob knows that the process of reviewing work is critical to avoiding bugs in production.","title":"\"They're crazy, they don't actually want this feature\""},{"location":"story/bobs_task/","text":"Bob's Task You see Bob walking to your desk. He seems to be in a good mood, but it looks like he has something on his mind. Bob: \"Hi Josh, the finance department needs an update to their dashboard and they want it done in a couple hours.\" How do you respond? \"Go away Bob, I'm busy\" \"Sure thing, Boss, I'll start on that right now\"","title":"Bob's Task"},{"location":"story/bobs_task/#bobs-task","text":"You see Bob walking to your desk. He seems to be in a good mood, but it looks like he has something on his mind. Bob: \"Hi Josh, the finance department needs an update to their dashboard and they want it done in a couple hours.\"","title":"Bob's Task"},{"location":"story/bobs_task/#how-do-you-respond","text":"\"Go away Bob, I'm busy\" \"Sure thing, Boss, I'll start on that right now\"","title":"How do you respond?"},{"location":"story/create_a_work_item/","text":"You create a work item for Sam Bob gives you a spot-bonus of $1K for being a good engineer Bob knows the importance of documenting work and he's glad you created a work item that reflects reality.","title":"You create a work item for Sam"},{"location":"story/create_a_work_item/#you-create-a-work-item-for-sam","text":"Bob gives you a spot-bonus of $1K for being a good engineer Bob knows the importance of documenting work and he's glad you created a work item that reflects reality.","title":"You create a work item for Sam"},{"location":"story/deploying_to_production/","text":"(Manually) Deploying to Production You take about 30 minutes to gather the files together, log in to the production server, and copy-paste the binaries directly onto the sever. You email the finance department that the feature is deployed. Job Done. You go back to working on your original task. Oops Finance emails you back saying the dashboard is down, and they can't do anything. This happens often, it's usually a pretty trivial thing. What do you do next? Redeploy the old version Log into the server and fix it manually","title":"Deploying to Production"},{"location":"story/deploying_to_production/#manually-deploying-to-production","text":"You take about 30 minutes to gather the files together, log in to the production server, and copy-paste the binaries directly onto the sever. You email the finance department that the feature is deployed. Job Done. You go back to working on your original task.","title":"(Manually) Deploying to Production"},{"location":"story/deploying_to_production/#oops","text":"Finance emails you back saying the dashboard is down, and they can't do anything. This happens often, it's usually a pretty trivial thing.","title":"Oops"},{"location":"story/deploying_to_production/#what-do-you-do-next","text":"Redeploy the old version Log into the server and fix it manually","title":"What do you do next?"},{"location":"story/first_of_the_month/","text":"First of the Month It's Monday: You're throwing up in bed. You call Bob and tell him you're sick, and need to take the day. 9am: Finance Monthly Reports Fail Finance submits an urgent bug report at 9am, Bob is in meetings until the 11am standup . Sam gets the bug report and starts trying to fix it. Sam looks at the automated system, and spends a couple hours investigating the currently deployed version: the bug is impossible to reproduce in the latest official version 11am Standup During standup, Sam reports that he\u2019s having difficulty reproducing the bug from finance in the latest version. Bob asks: does it have anything to do with the latest feature that Josh released? Sam: \"What feature? I don't see a work item, a completed pull request, or a new version\" Reverse Engineering the Fix Sam spends the next two hours talking with Bob and finance, trying to figure out what was done and why. Sam discovers that finance didn\u2019t understand that they were looking for a feature implemented five releases ago, that took three weeks to implement and test. Had this request gone through the Backlog grooming meeting, it would have been sent back to finance and no work would have been done. Continue to the results","title":"First of the Month"},{"location":"story/first_of_the_month/#first-of-the-month","text":"It's Monday: You're throwing up in bed. You call Bob and tell him you're sick, and need to take the day.","title":"First of the Month"},{"location":"story/first_of_the_month/#9am-finance-monthly-reports-fail","text":"Finance submits an urgent bug report at 9am, Bob is in meetings until the 11am standup . Sam gets the bug report and starts trying to fix it. Sam looks at the automated system, and spends a couple hours investigating the currently deployed version: the bug is impossible to reproduce in the latest official version","title":"9am: Finance Monthly Reports Fail"},{"location":"story/first_of_the_month/#11am-standup","text":"During standup, Sam reports that he\u2019s having difficulty reproducing the bug from finance in the latest version. Bob asks: does it have anything to do with the latest feature that Josh released? Sam: \"What feature? I don't see a work item, a completed pull request, or a new version\"","title":"11am Standup"},{"location":"story/first_of_the_month/#reverse-engineering-the-fix","text":"Sam spends the next two hours talking with Bob and finance, trying to figure out what was done and why. Sam discovers that finance didn\u2019t understand that they were looking for a feature implemented five releases ago, that took three weeks to implement and test. Had this request gone through the Backlog grooming meeting, it would have been sent back to finance and no work would have been done. Continue to the results","title":"Reverse Engineering the Fix"},{"location":"story/fixing_production/","text":"Putting out the Fire You log into the production server. You find a setting on the server that you don't understand: It should be turned off, but it's on. You have no idea why it's off, so you turn it on and restart the server. The dashboard works again, so you email finance. Job done. You should definitely tell Sam about what you did so he's on the same page. You could create a new work item for him to do, that would increase his official workload in the sprint though, and you don't want Sam to be overloaded with work items. How do you tell Sam? Create a work item for Sam Write yourself a sticky note to tell Sam on Monday","title":"Fixing Production"},{"location":"story/fixing_production/#putting-out-the-fire","text":"You log into the production server. You find a setting on the server that you don't understand: It should be turned off, but it's on. You have no idea why it's off, so you turn it on and restart the server. The dashboard works again, so you email finance. Job done. You should definitely tell Sam about what you did so he's on the same page. You could create a new work item for him to do, that would increase his official workload in the sprint though, and you don't want Sam to be overloaded with work items.","title":"Putting out the Fire"},{"location":"story/fixing_production/#how-do-you-tell-sam","text":"Create a work item for Sam Write yourself a sticky note to tell Sam on Monday","title":"How do you tell Sam?"},{"location":"story/go_away/","text":"\"Go away Bob, I'm busy\" Bob gives you a spot-bonus of $10K for being a good engineer Congratulations, Bob was just testing you. Bob was making sure that you were being disciplined and that you were adhering to the team's process. Bob knows that you aren't being a jerk, he knows that he needs to create a new work item in the backlog instead of talking to you . Bob also knows that you just got out of your backlog grooming meeting yesterday, and this work item was not listed in the backlog. Bob also knows that the finance department has been begging for other features for weeks, and desperately need the project you are currently working on for the audit that is coming in two weeks. Bob knows that Any distraction from your current work will delay the timelines of the projects you already have .","title":"\"Go away Bob, I'm busy\""},{"location":"story/go_away/#go-away-bob-im-busy","text":"Bob gives you a spot-bonus of $10K for being a good engineer Congratulations, Bob was just testing you. Bob was making sure that you were being disciplined and that you were adhering to the team's process. Bob knows that you aren't being a jerk, he knows that he needs to create a new work item in the backlog instead of talking to you . Bob also knows that you just got out of your backlog grooming meeting yesterday, and this work item was not listed in the backlog. Bob also knows that the finance department has been begging for other features for weeks, and desperately need the project you are currently working on for the audit that is coming in two weeks. Bob knows that Any distraction from your current work will delay the timelines of the projects you already have .","title":"\"Go away Bob, I'm busy\""},{"location":"story/policy_override/","text":"Pushing the code through Before code goes to production, Sam wrote an automated system that deploys it to a testing environment first. This deployment is usually a hassle, because things can break pretty easily here, and can be really hard to debug. You've heard Sam refer to this environment a lot, but you really don't see its value, because it takes a lot of work. This deployment failed. You're not sure why, but it most likley has to do with the test that you are pretty sure is a bad test. The automated system won't move forward without the testing environment passing. You've tested it on your machine though, it works just fine. It's just a binary, how hard could it be to deploy? What do you do next? Tell Bob you can't move the feature forward until Sam gets back Manually copy the files to Production","title":"Pushing through the Process"},{"location":"story/policy_override/#pushing-the-code-through","text":"Before code goes to production, Sam wrote an automated system that deploys it to a testing environment first. This deployment is usually a hassle, because things can break pretty easily here, and can be really hard to debug. You've heard Sam refer to this environment a lot, but you really don't see its value, because it takes a lot of work. This deployment failed. You're not sure why, but it most likley has to do with the test that you are pretty sure is a bad test. The automated system won't move forward without the testing environment passing. You've tested it on your machine though, it works just fine. It's just a binary, how hard could it be to deploy?","title":"Pushing the code through"},{"location":"story/policy_override/#what-do-you-do-next","text":"Tell Bob you can't move the feature forward until Sam gets back Manually copy the files to Production","title":"What do you do next?"},{"location":"story/redeploy/","text":"Redeploy the old version Bob gives you a spot-bonus of $2K for being a good engineer Bob knows that you should always rollback if you can : it's the safest option.","title":"Redeploy the old version"},{"location":"story/redeploy/#redeploy-the-old-version","text":"Bob gives you a spot-bonus of $2K for being a good engineer Bob knows that you should always rollback if you can : it's the safest option.","title":"Redeploy the old version"},{"location":"story/results/","text":"Results Sam tells finance the feature has already existed for a few months and improves the documentation on it. Restoring the previous version Sam redeploys the last official version through the automated system. The dashboard goes down again Josh changed something that broke the automated release. Sam logs into the server to find that Josh toggled a setting that the automation depended on. Sam toggles the setting and redeploys. Post-mortem Sam spends the rest of the day writing a report to the CFO and doing a post mortem on the mistakes Josh made, and why they cost the finance department an entire day of productivity on a critical day of the month. Bob awards Sam $10K in a spot-bonus for successfully following process and putting out a fire","title":"Results"},{"location":"story/results/#results","text":"Sam tells finance the feature has already existed for a few months and improves the documentation on it.","title":"Results"},{"location":"story/results/#restoring-the-previous-version","text":"Sam redeploys the last official version through the automated system.","title":"Restoring the previous version"},{"location":"story/results/#the-dashboard-goes-down-again","text":"Josh changed something that broke the automated release. Sam logs into the server to find that Josh toggled a setting that the automation depended on. Sam toggles the setting and redeploys.","title":"The dashboard goes down again"},{"location":"story/results/#post-mortem","text":"Sam spends the rest of the day writing a report to the CFO and doing a post mortem on the mistakes Josh made, and why they cost the finance department an entire day of productivity on a critical day of the month. Bob awards Sam $10K in a spot-bonus for successfully following process and putting out a fire","title":"Post-mortem"},{"location":"story/sticky_note/","text":"Write a Sticky Note You write yourself a sticky note to talk to Sam when he gets back in a week on Monday, the first of the month. You get back to your work. Continue to Monday","title":"Plan a Conversation"},{"location":"story/sticky_note/#write-a-sticky-note","text":"You write yourself a sticky note to talk to Sam when he gets back in a week on Monday, the first of the month. You get back to your work. Continue to Monday","title":"Write a Sticky Note"},{"location":"story/stop_working/","text":"\"I can't finish this until Sam gets back\" Bob gives you a spot-bonus of $4K for being a good engineer Congratulations, Bob was just testing you. Bob was making sure that you were being disciplined and that you were adhering to the team's process. Bob doesn't think you aren't capable of dong work yourself , Bob just knows that work review , and backlog grooming help define the work that needs to be done. Bob knows you are a capable developer and write good code, but he also knows that everyone makes mistakes, and that making good software is really hard. Bob is glad you want Sam's review before pushing to production.","title":"\"I can't finish this until Sam gets back\""},{"location":"story/stop_working/#i-cant-finish-this-until-sam-gets-back","text":"Bob gives you a spot-bonus of $4K for being a good engineer Congratulations, Bob was just testing you. Bob was making sure that you were being disciplined and that you were adhering to the team's process. Bob doesn't think you aren't capable of dong work yourself , Bob just knows that work review , and backlog grooming help define the work that needs to be done. Bob knows you are a capable developer and write good code, but he also knows that everyone makes mistakes, and that making good software is really hard. Bob is glad you want Sam's review before pushing to production.","title":"\"I can't finish this until Sam gets back\""},{"location":"story/sure_thing/","text":"\"Sure thing, Boss, I'll start on that right away\" You ask: \"What work item is this task for?\" Bob: \"Oh there isn't a work item, it's just a small tweak, should only take five minutes You have no reason to doubt Bob's estimate, he is a nice, competent guy, who hasn't steered you wrong yet. What do you do next? \"Don't bother me until you've created a work item, Bob\" Start writing code","title":"Understanding the Task"},{"location":"story/sure_thing/#sure-thing-boss-ill-start-on-that-right-away","text":"You ask: \"What work item is this task for?\" Bob: \"Oh there isn't a work item, it's just a small tweak, should only take five minutes You have no reason to doubt Bob's estimate, he is a nice, competent guy, who hasn't steered you wrong yet. What do you do next? \"Don't bother me until you've created a work item, Bob\" Start writing code","title":"\"Sure thing, Boss, I'll start on that right away\""},{"location":"story/work_item/","text":"\"Don't bother me until you've created a work item, Bob\" Bob gives you a spot-bonus of $8K for being a good engineer Congratulations, Bob was just testing you. Bob was making sure that you were being disciplined and that you were adhering to the team's agile process . Bob knows that the simple practice of documenting work benefits everyone: It formally records what should be done It documents the interpretation of the client's needs It allows people to ask \"What happened and why did it happen?\"","title":"\"Don't bother me until you've created a work item, Bob\""},{"location":"story/work_item/#dont-bother-me-until-youve-created-a-work-item-bob","text":"Bob gives you a spot-bonus of $8K for being a good engineer Congratulations, Bob was just testing you. Bob was making sure that you were being disciplined and that you were adhering to the team's agile process . Bob knows that the simple practice of documenting work benefits everyone: It formally records what should be done It documents the interpretation of the client's needs It allows people to ask \"What happened and why did it happen?\"","title":"\"Don't bother me until you've created a work item, Bob\""},{"location":"story/write_code/","text":"Doing the Work: Writing Code You write some code to implement what Bob described to you. He was right, it took just a few minutes to do, and you can understand why they asked for it. You commit your code, and open a pull request. Sam is forcing you to use a fancy automated build system that breaks all the time . The automated build for your pull request failed: it's a test that Sam wrote months ago. Sam is always ranting about \"Test Driven Development\" , but that's usually because Sam writes 3 times as much testing code as Production code - that's boring. You take a look at the failing test: it's one out of 500 tests that Sam wrote 3 months ago, you're pretty sure that Sam didn't know what you know now, and that the test doesn't matter. The pull request policy requires the tests to pass though. How do you handle this test failure? Tell Bob \"They're crazy, they don't actually want this feature\" Ask Bob to override the review policy","title":"Doing the Work"},{"location":"story/write_code/#doing-the-work-writing-code","text":"You write some code to implement what Bob described to you. He was right, it took just a few minutes to do, and you can understand why they asked for it. You commit your code, and open a pull request. Sam is forcing you to use a fancy automated build system that breaks all the time . The automated build for your pull request failed: it's a test that Sam wrote months ago. Sam is always ranting about \"Test Driven Development\" , but that's usually because Sam writes 3 times as much testing code as Production code - that's boring. You take a look at the failing test: it's one out of 500 tests that Sam wrote 3 months ago, you're pretty sure that Sam didn't know what you know now, and that the test doesn't matter. The pull request policy requires the tests to pass though.","title":"Doing the Work: Writing Code"},{"location":"story/write_code/#how-do-you-handle-this-test-failure","text":"Tell Bob \"They're crazy, they don't actually want this feature\" Ask Bob to override the review policy","title":"How do you handle this test failure?"}]}